<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gd774.effic.mapper.MsgMapper">
  <resultMap type="com.gd774.effic.dto.MsgDto" id="MsgMap">
	<result  property="msgId"          column="MSG_ID"/>
	<result  property="sender"     column="SENDER"/>
	<result  property="title"         column="TITLE"/>
    <result  property="contents"        column="CONTENTS"/>
	<result  property="sendDt"        column="SEND_DT"/>
	<result  property="state"        column="STATE"/>
	<result  property="isDelete"        column="IS_DELETE"/>
	<result  property="isMe"        column="IS_Me"/>
	<result  property="chkImpt"        column="CHK_IMPT"/>
	<result  property="originalName"        column="ORIGINAL_NAME"/>
	<result  property="recpId"        column="RECP_ID"/>
	<result  property="recipient"        column="RECIPIENT"/>
	<result  property="sort"        column="SORT"/>
	<result  property="readDt"        column="READ_DT"/>
	<result  property="sname"        column="SNAME"/>
	<result  property="rname"        column="RNAME"/>
  </resultMap>


<insert id="insertMsg"
        parameterType="MsgDto">
  <selectKey order="BEFORE" keyProperty="msgId" resultType="int">
	SELECT MSG_SEQ.NEXTVAL
	  FROM DUAL
  </selectKey>
INSERT INTO MSG_T(
     MSG_ID
   , SENDER
   , TITLE
   , CONTENTS
   , SEND_DT
   , STATE
   , IS_DELETE
   , CHK_IMPT
 ) VALUES (
     #{msgId}
   , #{sender}  
   , #{title}  
   , #{contents}
   , SYSDATE
   , 0
   , 0
   , 0  
 ) 
</insert>

<insert id="insertMe"
        parameterType="MsgDto">
<selectKey order="BEFORE" keyProperty="msgId" resultType="int">
	SELECT MSG_SEQ.NEXTVAL
	  FROM DUAL
  </selectKey>
INSERT INTO MSG_T(
     MSG_ID
   , SENDER
   , TITLE
   , CONTENTS
   , SEND_DT
   , STATE
   , IS_ME
   , IS_DELETE
   , CHK_IMPT
 ) VALUES (
     #{msgId}
   , #{sender}  
   , #{title}  
   , #{contents}
   , SYSDATE
   , 0
   , 1
   , 0
   , 0  
 ) 
</insert>

<insert id="insertRecp"
        parameterType="RecpDto">
INSERT INTO RECP_T(
     RECP_ID
   , MSG_ID
   , RECIPIENT
   , STATE
   , IS_DELETE
   , CHK_IMPT
 ) VALUES (
     RECP_SEQ.NEXTVAL
   , #{msgId}  
   , #{recipient}
   , 0
   , 0
   , 0  
 ) 
</insert>



<insert id="insertAttach"
        parameterType="MsgAttachDto">
 INSERT INTO MSG_ATTACH_T (
      ATTACH_ID
    , UPLOAD_PATH
    , FILESYS_NAME
    , ORIGINAL_NAME
    , MSG_ID
  ) VALUES (
      MSG_ATTACH_SEQ.NEXTVAL
    , #{uploadPath}
    , #{filesysName}
    , #{originalName}
    , #{msgId}
  )


</insert>

<select id="getToMeCount">
SELECT COUNT(MSG_ID)
FROM MSG_T
WHERE SENDER = #{sender} AND STATE=0 AND IS_ME=1

</select>

<select id="getToMeList"
        resultMap="MsgMap">
SELECT MSG_ID, TITLE, SEND_DT, CHK_IMPT, NAME,
 CASE WHEN EXISTS ( SELECT ATTACH_ID 
                      FROM MSG_ATTACH_T A
                     WHERE MAIN.MSG_ID = A.MSG_ID) 
              THEN 'Y' ELSE 'N' END AS HAS_ATTACH
FROM (SELECT ROW_NUMBER() OVER(ORDER BY M.SEND_DT DESC) AS RN 
            , M.MSG_ID, M.TITLE, M.SEND_DT, M.CHK_IMPT, U.NAME
         FROM MSG_T M 
         JOIN USER_T U ON U.EMP_ID = M.SENDER
        WHERE M.SENDER = #{sender} AND M.STATE=0 AND M.IS_ME=1) MAIN
WHERE RN BETWEEN #{begin} AND #{end}
</select>  
  
  
  
  
<select id="getMsgCount">
SELECT COUNT(MSG_ID)
FROM MSG_T
WHERE SENDER = #{sender} AND IS_ME=0 AND STATE=0

</select>

<select id="getListMsg"
        parameterType="Map"
        resultMap="MsgMap">
SELECT 
    MSG_ID, 
    NAME, 
    TITLE, 
    SEND_DT, 
    CHK_IMPT, 
    NAME, 
    CASE 
        WHEN EXISTS (
            SELECT ATTACH_ID 
            FROM MSG_ATTACH_T A
            WHERE MAIN.MSG_ID = A.MSG_ID
        ) THEN 'Y' 
        ELSE 'N' 
    END AS HAS_ATTACH
FROM (
    SELECT 
        ROW_NUMBER() OVER (ORDER BY M.SEND_DT DESC) AS RN,
        M.MSG_ID, 
        M.TITLE, 
        M.CONTENTS, 
        M.SEND_DT, 
        M.CHK_IMPT, 
        (SELECT LISTAGG(U.NAME, ', ') WITHIN GROUP (ORDER BY U.NAME)
         FROM RECP_T R
         JOIN USER_T U ON U.EMP_ID = R.RECIPIENT
         WHERE R.MSG_ID = M.MSG_ID) AS NAME
    FROM 
        MSG_T M
    WHERE 
        M.SENDER = #{sender} AND M.STATE = 0 AND M.IS_ME = 0
) MAIN
WHERE 
    RN BETWEEN #{begin} AND #{end}
</select>

<select id="getMsgDetail">
SELECT 
    M.MSG_ID, 
    M.TITLE, 
    M.CONTENTS, 
    M.SEND_DT, 
    (SELECT LISTAGG(U.NAME, ', ') WITHIN GROUP (ORDER BY U.NAME)
       FROM RECP_T R
       JOIN USER_T U ON U.EMP_ID = R.RECIPIENT
      WHERE R.MSG_ID = M.MSG_ID) AS NAME
FROM MSG_T M
WHERE M.MSG_ID = #{msgId}    
</select>

<select id="getRecipientList">
SELECT U.NAME
  FROM RECP_T R
  JOIN MSG_T M
    ON M.MSG_ID = R.MSG_ID
  JOIN USER_T U
    ON R.RECIPIENT = U.EMP_ID
WHERE R.MSG_ID = #{msgId} AND READ_DT IS NOT NULL 
</select>

<select id="getToMeDetail">
SELECT M.MSG_ID, M.TITLE, M.CONTENTS, M.SEND_DT, NAME
FROM MSG_T M 
JOIN USER_T U ON U.EMP_ID = M.SENDER 
WHERE M.MSG_ID = #{msgId} AND M.IS_ME=1     
</select>

<!-- msgId에 따른 첨부파일들을 뽑아주는 쿼리 -->
  <select id="getMsgAttach"
          resultType="MsgAttachDto">
   SELECT  ATTACH_ID
    , UPLOAD_PATH
    , FILESYS_NAME
    , ORIGINAL_NAME
   FROM MSG_ATTACH_T
   WHERE MSG_ID = #{msgId}
  </select>
  
    <select id="getMsgOneAttach"
          resultType="MsgAttachDto">
   SELECT  ATTACH_ID
    , UPLOAD_PATH
    , FILESYS_NAME
    , ORIGINAL_NAME
   FROM MSG_ATTACH_T
   WHERE MSG_ID = #{msgId}
  </select>
  
   <select id="selectCountAttach">
   SELECT COUNT(ATTACH_ID)
   FROM MSG_ATTACH_T
   WHERE MSG_ID = #{msgId}
  </select>


<select id="getRcpCount">
SELECT COUNT(RECP_ID)
FROM RECP_T
WHERE RECIPIENT = #{recipient} AND STATE=0
</select>


<select id="getListRcp"
        parameterType="Map"
        resultMap="MsgMap">
SELECT MSG_ID, RECIPIENT, TITLE, SEND_DT, CHK_IMPT, SENDER, READ_DT, RECP_ID, NAME,
 CASE WHEN EXISTS ( SELECT ATTACH_ID 
                      FROM MSG_ATTACH_T A
                     WHERE MAIN.MSG_ID = A.MSG_ID) 
              THEN 'Y' ELSE 'N' END AS HAS_ATTACH
FROM (SELECT ROW_NUMBER() OVER(ORDER BY M.SEND_DT DESC) AS RN 
            , M.MSG_ID, R.RECIPIENT, M.TITLE, M.SEND_DT, R.CHK_IMPT, M.SENDER, R.READ_DT, R.RECP_ID, U.NAME
         FROM MSG_T M 
         JOIN RECP_T R ON M.MSG_ID = R.MSG_ID
         JOIN USER_T U ON U.EMP_ID = M.SENDER 
        WHERE R.RECIPIENT = #{recipient} AND R.STATE=0) MAIN
WHERE RN BETWEEN #{begin} AND #{end}
</select>

<select id="getRcpDetail"
        parameterType="Map">
SELECT M.MSG_ID, R.RECIPIENT, M.TITLE, M.CONTENTS, M.SEND_DT, M.SENDER, R.READ_DT, SU.NAME, R.RECP_ID 
FROM MSG_T M 
JOIN RECP_T R ON R.MSG_ID = M.MSG_ID
JOIN USER_T RU ON RU.EMP_ID = R.RECIPIENT 
JOIN USER_T SU ON SU.EMP_ID = M.SENDER 
WHERE M.MSG_ID = #{msgId} AND R.RECIPIENT = #{recipient} 
</select>

<update id="updateReadDt">
UPDATE RECP_T 
   SET READ_DT=SYSDATE
 WHERE MSG_ID=#{msgId} AND RECIPIENT=#{recipient} AND READ_DT IS NULL
</update>

<update id="updateSentChkImpt">
UPDATE MSG_T 
   SET CHK_IMPT = CASE 
        WHEN CHK_IMPT = 1 THEN 0
        ELSE 1
    END
 WHERE MSG_ID=#{msgId}
</update>

<update id="updateSentOnlyChkImpt">
UPDATE MSG_T 
   SET CHK_IMPT = 1
 WHERE MSG_ID=#{msgId}
</update>

<update id="updateInboxChkImpt">
UPDATE RECP_T 
   SET CHK_IMPT = CASE 
        WHEN CHK_IMPT = 1 THEN 0
        ELSE 1
    END
 WHERE RECP_ID=#{recpId}
</update>

<update id="updateInboxOnlyChkImpt">
UPDATE RECP_T 
   SET CHK_IMPT = 1
 WHERE RECP_ID=#{recpId}
</update>

<select id="getImpCount"
        parameterType="Map">
SELECT COUNT(DISTINCT SORT) 
  FROM (
         SELECT CONCAT('R',R.RECP_ID)  AS SORT
           FROM MSG_T M JOIN RECP_T R
             ON M.MSG_ID = R.MSG_ID
          WHERE R.RECIPIENT = #{recipient} AND R.STATE=0 AND R.CHK_IMPT=1
     UNION ALL
         SELECT  CONCAT('M', M.MSG_ID) AS SORT
           FROM MSG_T M JOIN RECP_T R
             ON M.MSG_ID = R.MSG_ID
          WHERE M.SENDER = #{sender} AND M.STATE=0 AND M.CHK_IMPT=1
          UNION ALL
        SELECT CONCAT('P', M.MSG_ID) AS SORT
         FROM MSG_T M
         JOIN USER_T SU
           ON SU.EMP_ID = M.SENDER
           WHERE M.SENDER =  #{sender} AND M.STATE=0 AND M.CHK_IMPT=1 AND M.IS_ME = 1)    
</select>


<select id="getImpList"
        parameterType="Map"
        resultMap="MsgMap">
SELECT DISTINCT
    SORT, 
    MSG_ID, 
    RECIPIENTLIST AS RECIPIENT, 
    TITLE, 
    SEND_DT, 
    SENDER, 
    RNAME,  
    SNAME, 
    CHK_IMPT,
    CASE 
        WHEN EXISTS ( 
            SELECT ATTACH_ID 
            FROM MSG_ATTACH_T A
            WHERE MAIN.MSG_ID = A.MSG_ID
        ) THEN 'Y' 
        ELSE 'N' 
    END AS HAS_ATTACH
FROM (
    SELECT 
        ROW_NUMBER() OVER (ORDER BY SEND_DT DESC) AS RN, 
        SORT, 
        MSG_ID, 
        (SELECT LISTAGG(U.EMP_ID, ', ') WITHIN GROUP (ORDER BY U.EMP_ID)
         FROM RECP_T R
         JOIN USER_T U ON U.EMP_ID = R.RECIPIENT
         WHERE R.MSG_ID = M.MSG_ID) AS RECIPIENTLIST,
        TITLE, 
        SEND_DT, 
        CHK_IMPT, 
        SENDER, 
        (SELECT LISTAGG(U.NAME, ', ') WITHIN GROUP (ORDER BY U.NAME)
         FROM RECP_T R
         JOIN USER_T U ON U.EMP_ID = R.RECIPIENT
         WHERE R.MSG_ID = M.MSG_ID) AS RNAME,
        SNAME
    FROM (
        SELECT 
            CONCAT('R', R.RECP_ID) AS SORT, 
            M.MSG_ID, 
            M.TITLE, 
            M.SEND_DT, 
            R.CHK_IMPT, 
            M.SENDER, 
            RU.NAME AS RNAME, 
            SU.NAME AS SNAME
        FROM 
            MSG_T M 
        JOIN 
            RECP_T R ON M.MSG_ID = R.MSG_ID
        JOIN 
            USER_T SU ON SU.EMP_ID = M.SENDER
        JOIN 
            USER_T RU ON RU.EMP_ID = R.RECIPIENT
        WHERE 
            R.RECIPIENT = #{recipient}   
            AND R.STATE = 0 
            AND R.CHK_IMPT = 1
        
        UNION ALL
        
        SELECT  
            CONCAT('M', M.MSG_ID) AS SORT, 
            M.MSG_ID, 
            M.TITLE, 
            M.SEND_DT, 
            M.CHK_IMPT, 
            M.SENDER, 
            RU.NAME AS RNAME, 
            SU.NAME AS SNAME
        FROM 
            MSG_T M 
        JOIN 
            RECP_T R ON M.MSG_ID = R.MSG_ID
        JOIN 
            USER_T SU ON SU.EMP_ID = M.SENDER
        JOIN 
            USER_T RU ON RU.EMP_ID = R.RECIPIENT
        WHERE 
            M.SENDER = #{sender}  
            AND M.STATE = 0 
            AND M.CHK_IMPT = 1
        
        UNION ALL
        
        SELECT 
            CONCAT('P', M.MSG_ID) AS SORT,
            M.MSG_ID, 
            M.TITLE, 
            M.SEND_DT, 
            M.CHK_IMPT, 
            M.SENDER, 
            SU.NAME AS RNAME, 
            SU.NAME AS SNAME
        FROM 
            MSG_T M
        JOIN 
            USER_T SU ON SU.EMP_ID = M.SENDER
        WHERE 
            M.SENDER = #{sender} 
            AND M.STATE = 0 
            AND M.CHK_IMPT = 1 
            AND M.IS_ME = 1
    ) M
) MAIN       
WHERE RN BETWEEN #{begin} AND #{end}
ORDER BY SEND_DT DESC
 
</select>


<update id="updateSentTobBin">
UPDATE MSG_T 
   SET STATE = 1
 WHERE MSG_ID=#{msgId}
</update>

<update id="updateInboxToBin">
UPDATE RECP_T 
   SET STATE = 1
 WHERE RECP_ID=#{recpId}
</update>
 
 <select id="getBinList"
        parameterType="Map"
        resultMap="MsgMap">
SELECT DISTINCT
    SORT, 
    MSG_ID, 
    RECIPIENTLIST AS RECIPIENT, 
    TITLE, 
    SEND_DT, 
    SENDER, 
    RNAME,
    SNAME,
    CASE 
        WHEN EXISTS ( 
            SELECT ATTACH_ID 
            FROM MSG_ATTACH_T A 
            WHERE MAIN.MSG_ID = A.MSG_ID
        ) THEN 'Y' 
        ELSE 'N' 
    END AS HAS_ATTACH
FROM (
    SELECT 
        ROW_NUMBER() OVER (ORDER BY SEND_DT DESC) AS RN, 
        SORT, 
        MSG_ID, 
        (SELECT LISTAGG(U.EMP_ID, ', ') WITHIN GROUP (ORDER BY U.EMP_ID)
         FROM RECP_T R
         JOIN USER_T U ON U.EMP_ID = R.RECIPIENT
         WHERE R.MSG_ID = M.MSG_ID) AS RECIPIENTLIST,
        TITLE, 
        SEND_DT, 
        CHK_IMPT, 
        SENDER, 
        (SELECT LISTAGG(U.NAME, ', ') WITHIN GROUP (ORDER BY U.NAME)
         FROM RECP_T R
         JOIN USER_T U ON U.EMP_ID = R.RECIPIENT
         WHERE R.MSG_ID = M.MSG_ID) AS RNAME,
        SNAME
    FROM (
        SELECT 
            CONCAT('R', R.RECP_ID) AS SORT, 
            M.MSG_ID, 
            M.TITLE, 
            M.SEND_DT, 
            R.CHK_IMPT, 
            M.SENDER, 
            RU.NAME AS RNAME, 
            SU.NAME AS SNAME
        FROM 
            MSG_T M 
        JOIN 
            RECP_T R ON M.MSG_ID = R.MSG_ID
        JOIN 
            USER_T SU ON SU.EMP_ID = M.SENDER
        JOIN 
            USER_T RU ON RU.EMP_ID = R.RECIPIENT
        WHERE 
            R.RECIPIENT = #{recipient} 
            AND R.STATE = 1 
            AND R.IS_DELETE = 0
        
        UNION ALL
        
        SELECT  
            CONCAT('M', M.MSG_ID) AS SORT, 
            M.MSG_ID, 
            M.TITLE, 
            M.SEND_DT, 
            M.CHK_IMPT, 
            M.SENDER, 
            RU.NAME AS RNAME, 
            SU.NAME AS SNAME
        FROM 
            MSG_T M 
        JOIN 
            RECP_T R ON M.MSG_ID = R.MSG_ID
        JOIN 
            USER_T SU ON SU.EMP_ID = M.SENDER
        JOIN 
            USER_T RU ON RU.EMP_ID = R.RECIPIENT
        WHERE 
            M.SENDER = #{sender} 
            AND M.STATE = 1 
            AND M.IS_DELETE = 0 
            AND M.IS_ME = 0
        
        UNION ALL
        
        SELECT 
            CONCAT('P', M.MSG_ID) AS SORT,
            M.MSG_ID, 
            M.TITLE, 
            M.SEND_DT, 
            M.CHK_IMPT, 
            M.SENDER, 
            SU.NAME AS RNAME, 
            SU.NAME AS SNAME
        FROM 
            MSG_T M
        JOIN 
            USER_T SU ON SU.EMP_ID = M.SENDER
        WHERE 
            M.SENDER = #{sender} 
            AND M.STATE = 1 
            AND M.IS_DELETE = 0 
            AND M.IS_ME = 1
    ) M
) MAIN       
WHERE 
    RN BETWEEN #{begin} AND #{end}
    ORDER BY SEND_DT DESC    
</select>

<select id="getBinCount"
        parameterType="Map">

SELECT COUNT(DISTINCT SORT)
  FROM (
         SELECT CONCAT('R',R.RECP_ID)  AS SORT
           FROM MSG_T M JOIN RECP_T R
             ON M.MSG_ID = R.MSG_ID
          WHERE R.RECIPIENT = #{recipient} AND R.STATE=1 AND R.IS_DELETE=0
     UNION ALL
         SELECT  CONCAT('M', M.MSG_ID) AS SORT
           FROM MSG_T M JOIN RECP_T R
             ON M.MSG_ID = R.MSG_ID
          WHERE M.SENDER = #{sender} AND M.STATE=1 AND M.IS_DELETE=0
     UNION ALL
        SELECT CONCAT('P', M.MSG_ID) AS SORT
         FROM MSG_T M
         JOIN USER_T SU
           ON SU.EMP_ID = M.SENDER
        WHERE M.SENDER =  #{sender} AND M.STATE=1 AND M.IS_DELETE=0 AND M.IS_ME = 1)

</select>

<select id="recipientList"
        resultMap="MsgMap">
SELECT U.NAME
  FROM MSG_T M 
  JOIN RECP_T R
    ON M.MSG_ID = R.MSG_ID
  JOIN USER_T U 
    ON U.EMP_ID = R.RECIPIENT  
 WHERE R.READ_DT IS NOT NULL AND M.MSG_ID=#{msgId}
</select>


<update id="cancelSentImpList">
UPDATE MSG_T 
   SET CHK_IMPT = 0
 WHERE MSG_ID=#{msgId}
</update>

<update id="cancelInboxImpList">
UPDATE RECP_T 
   SET CHK_IMPT = 0
 WHERE RECP_ID=#{recpId}
</update>

<update id="updateMsgRemove">
UPDATE MSG_T 
   SET IS_DELETE = 1
 WHERE MSG_ID=#{msgId}
</update>


<update id="updateRcpRemove">
UPDATE RECP_T 
   SET IS_DELETE = 1
 WHERE RECP_ID=#{recpId}
</update>

<update id="cancelSentBin">
UPDATE MSG_T
   SET STATE = 0
 WHERE MSG_ID=#{msgId}
</update>

<update id="cancelInboxBin">
UPDATE RECP_T 
   SET STATE = 0
 WHERE RECP_ID=#{recpId}
</update>

<select id="countNoRead">
SELECT COUNT(RECP_ID)
  FROM RECP_T
 WHERE RECIPIENT=#{recipient} AND READ_DT IS NULL
</select>

<update id="allRemoveMsg">
UPDATE MSG_T SET IS_DELETE = 1
WHERE STATE=1
</update>
<update id="allRemoveRecp">
UPDATE RECP_T SET IS_DELETE = 1
WHERE STATE=1
</update>

<select id="getTeamRegister">
SELECT EMP_ID
FROM USER_T
WHERE DEP_ID = #{depId} AND EMP_ID != #{empId}

</select>

<select id="getTeamInboxCount">
SELECT COUNT(RECP_ID)
FROM RECP_T R
JOIN MSG_T M
ON R.MSG_ID = M.MSG_ID
JOIN USER_T U 
ON U.EMP_ID = M.SENDER
WHERE R.RECIPIENT = #{recipient} AND U.DEP_ID = #{depId}  AND R.STATE=0
</select>

<select id="getTeamInboxList"
        resultMap="MsgMap">
SELECT MSG_ID, RECIPIENT, TITLE, SEND_DT, CHK_IMPT, SENDER, READ_DT, RECP_ID, NAME,
 CASE WHEN EXISTS ( SELECT ATTACH_ID 
                      FROM MSG_ATTACH_T A
                     WHERE MAIN.MSG_ID = A.MSG_ID) 
              THEN 'Y' ELSE 'N' END AS HAS_ATTACH
FROM (SELECT ROW_NUMBER() OVER(ORDER BY M.SEND_DT DESC) AS RN 
            , M.MSG_ID, R.RECIPIENT, M.TITLE, M.SEND_DT, R.CHK_IMPT, M.SENDER, R.READ_DT, R.RECP_ID, U.NAME
         FROM MSG_T M 
         JOIN RECP_T R ON M.MSG_ID = R.MSG_ID
         JOIN USER_T U ON U.EMP_ID = M.SENDER 
        WHERE R.RECIPIENT = #{recipient} AND U.DEP_ID = #{depId} AND R.STATE=0) MAIN
WHERE RN BETWEEN #{begin} AND #{end}
</select>


<select id="getUnReadCount">
SELECT COUNT(RECP_ID)
FROM RECP_T
WHERE RECIPIENT=#{recipient} AND READ_DT IS NULL
</select>
   
<select id="IsMsgId">
SELECT MSG_ID
FROM RECP_T
WHERE RECP_ID = #{recpId}
</select>   

</mapper>
